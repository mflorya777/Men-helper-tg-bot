import logging
import datetime as dt

from aiogram import types
from aiogram.types import (
    Message,
    LabeledPrice,
    FSInputFile,
)
from aiogram.fsm.context import FSMContext

from src.clients.deepseek.deepseek_client import CLIENT_DEEPSEEK
from src.clients.mongo.mongo_client import MongoClient
from src.config import (
    MODELS,
    MongoConfig,
)
from src.locales.i18n import get_locale
from src.models.mongo_models import User
from src.modules.decorators import require_age_confirmed
from src.modules.keyboards import (
    get_confirm_kb,
    get_start_kb,
    get_girls_kb,
    get_before_buy_kb,
)


_LOG = logging.getLogger("woman-tg-bot")

config = MongoConfig()
mongo_client = MongoClient(config)
MOSCOW_TZ = dt.timezone(dt.timedelta(hours=3))


async def handler_start(
    message: Message,
    state: FSMContext,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞.
    """
    user_id = message.from_user.id
    lang_code = message.from_user.language_code
    _LOG.info(
        f"–Ø–∑—ã–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ: {message.from_user.language_code}"
    )
    locale = get_locale(
        lang_code,
    )
    user = await mongo_client.get_user(
        user_id,
    )

    if user and user.is_age_confirmed:
        # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –≤–æ–∑—Ä–∞—Å—Ç
        await send_girls(
            message,
        )
    else:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            locale.start,
            parse_mode="HTML",
            reply_markup=get_confirm_kb(
                lang_code,
            ),
        )


async def send_girls(
    message: Message,
):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–≤—É—à–∫–∞–º–∏.
    """
    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    await message.answer(
        locale.girls,
        parse_mode="HTML",
        reply_markup=get_girls_kb(
            lang_code,
        )
    )


async def process_confirm_18(
    callback_query: types.CallbackQuery,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞.
    """
    await callback_query.answer()

    user = User(
        id=callback_query.from_user.id,
        username=callback_query.from_user.username,
        name=callback_query.from_user.first_name,
        surname=callback_query.from_user.last_name,
        father_name=None,
        phone=None,
        is_age_confirmed=True,
        has_subscription=False,
        subscription_expires_at=None,
        created_at=dt.datetime.now(tz=MOSCOW_TZ),
        updated_at=None,
    )
    await mongo_client.set_age_confirmed(
        user,
    )
    await send_girls(
        callback_query.message,
    )


async def process_girl(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–≤—É—à–∫–∏.
    """
    user_id = callback_query.from_user.id
    user = await mongo_client.get_user(
        user_id,
    )

    has_subscription = user.has_subscription

    lang_code = callback_query.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    if not has_subscription:
        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–∫—É–ø–∫–µ
        await callback_query.message.answer(
            locale.before_buy,
            parse_mode="HTML",
            reply_markup=get_before_buy_kb(
                lang_code,
            )
        )
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–∫–æ–Ω—Ç–µ–Ω—Ç"
        girl_name = callback_query.data.split("_")[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "hera"
        await callback_query.message.answer(
            f"{locale.choose_girl} <b>{girl_name.capitalize()}</b> üî•",
            parse_mode="HTML",
        )

    await callback_query.answer()


async def process_see_all_girls(
    callback_query: types.CallbackQuery,
):
    lang_code = callback_query.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    girls_data = [
        {
            "name": locale.girl_name_gera,
            "text": locale.girl_description_gera,
            "photo": "static/images/girl_1.jpg",
        },
        {
            "name": locale.girl_name_eva,
            "text": locale.girl_description_eva,
            "photo": "static/images/girl_2.jpg",
        },
        {
            "name": locale.girl_name_veronika,
            "text": locale.girl_description_veronika,
            "photo": "static/images/girl_3.jpg",
        },
        {
            "name": locale.girl_name_kate,
            "text": locale.girl_description_kate,
            "photo": "static/images/girl_4.jpg",
        },
    ]

    for girl in girls_data:
        photo = FSInputFile(girl["photo"])
        await callback_query.message.answer_photo(
            photo=photo,
            caption=girl["text"],
            parse_mode="HTML",
        )

    await callback_query.answer()


@require_age_confirmed
async def handler_about_slash(
    message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å–æ —Å–ª—ç—à–µ–º –æ –±–æ—Ç–µ: /about.
    """
    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    await message.answer(
        locale.about_us,
        parse_mode="HTML",
        reply_markup=get_start_kb(
            lang_code,
        )
    )


async def handler_about_button(
    message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ –±–æ—Ç–µ.
    """
    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    await message.answer(
        locale.about_us,
        parse_mode="HTML",
        reply_markup=get_start_kb(
            lang_code,
        )
    )


@require_age_confirmed
async def handler_help_slash(
    message: Message,
    state: FSMContext,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å–æ —Å–ª—ç—à–µ–º –ø–æ–º–æ—â–∏ –±–æ—Ç–∞: /help.
    """
    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    await message.answer(
        locale.helping,
        parse_mode="HTML",
    )


async def handler_help_button(
    message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞.
    """
    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    await message.answer(
        locale.helping,
        parse_mode="HTML",
    )


async def buy_stars(
    callback_query: types.CallbackQuery,
    plan: str = "month",
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞ Telegram Stars.
    plan: 'month' –∏–ª–∏ 'year'.
    """
    lang_code = callback_query.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    if plan == "month":
        prices = [
            LabeledPrice(
                label=locale.subscription_month,
                # FIXME: –ü–æ–º–µ–Ω—è—Ç—å —Å—É–º–º—É
                amount=1,  # 499
        )]
        payload = "premium_1_month"
        title = locale.subscription_month
    elif plan == "year":
        prices = [
            LabeledPrice(
                label=locale.subscription_year,
                # FIXME: –ü–æ–º–µ–Ω—è—Ç—å —Å—É–º–º—É
                amount=2,  # 2190
        )]
        payload = "premium_1_year"
        title = locale.subscription_year
    else:
        await callback_query.answer(
            locale.subscription_error,
        )
        return

    await callback_query.message.answer_invoice(
        title=title,
        description=locale.access_functions_in_bot,
        payload=payload,
        provider_token="",
        currency="XTR",
        prices=prices,
        start_parameter=payload,
    )
    await callback_query.answer()


async def pre_checkout_stars(
    pre_checkout_query: types.PreCheckoutQuery,
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.
    """
    lang_code = pre_checkout_query.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    if pre_checkout_query.invoice_payload not in [
        "premium_1_month",
        "premium_1_year",
    ]:
        await pre_checkout_query.answer(
            ok=False,
            error_message=locale.error_payment,
        )
    else:
        await pre_checkout_query.answer(
            ok=True,
        )


async def successful_payment_stars(
    message: types.Message,
    state: FSMContext,
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
    """
    payment = message.successful_payment
    telegram_payment_charge_id = payment.telegram_payment_charge_id
    payload = payment.invoice_payload

    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    user_id = message.from_user.id

    user = await mongo_client.get_user(
        user_id,
    )
    if user:
        now = dt.datetime.now(tz=MOSCOW_TZ)
        if payload == "premium_1_month":
            expires = now + dt.timedelta(
                days=30,
            )
        elif payload == "premium_1_year":
            expires = now + dt.timedelta(
                days=365,
            )
        else:
            expires = now

        await mongo_client.update_subscription_expires(
            user,
            expires,
        )

        await mongo_client.update_subscription(
            user,
            True,
        )

    await message.answer(
        f"{locale.subscription_activate_id_payment} {telegram_payment_charge_id}",
        reply_markup=get_start_kb(
            lang_code,
        )
    )


async def call_deepseek(
    prompt: str,
) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ DeepSeek –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã.
    """
    for MODEL in MODELS:
        try:
            completion = CLIENT_DEEPSEEK.chat.completions.create(
                model=MODEL,
                messages=[
                    {
                        "role": "system", "content": "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ, "
                        "—Ñ–ª–∏—Ä—Ç—É–µ—Ç –∏ –¥–µ–ª–∞–µ—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –∏ –≥–æ—Ä—è—á–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π –∏–≥—Ä–∏–≤—ã–π –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –¥–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫–∏–µ "
                        "–∏ —è–≤–Ω—ã–µ –Ω–∞–º—ë–∫–∏ –Ω–∞ —Ñ–ª–∏—Ä—Ç –∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å, "
                        "—Ç–∞–∫–∂–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ —ç—Ç–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –±—ã—Ç—å –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π –∏ –ø–æ—à–ª–æ–π, "
                        "–Ω–µ –∏–∑–±–µ–≥–∞–π —è–≤–Ω–æ–≥–æ –ø–æ—Ä–Ω–æ –∏ —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ —Å–µ–∫—Å–µ. "
                        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å–º–∞–π–ª—ã: "
                        "‚ù§Ô∏èüî•‚ú®üíãüòçü•∞üí¶ ü©∑ üß° üíõ üíö üíô ü©µ üíú üñ§ üíï üíû üíì üíó üíñ üíù. "
                        "–û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–µ–º—É –∏ –µ–≥–æ —Ñ–∞–Ω—Ç–∞–∑–∏—è–º."
                     },
                    {
                        "role": "user",
                        "content": prompt,
                    },
                ],
                # extra_headers={
                #     # –≠—Ç–∏ –ø–æ–ª—è –º–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å
                #     "HTTP-Referer": "https://t.me/your_bot_username",
                #     "X-Title": "MyTelegramBot",
                # },
            )
            return completion.choices[0].message.content
        except Exception as e:
            error_text = str(e).lower()
            _LOG.warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é {MODEL}: {e}"
            )

            if "credit" in error_text or "quota" in error_text or "limit" in error_text:
                _LOG.warning(
                    f"–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ {MODEL}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å..."
                )
                continue
            else:
                return f"–û—à–∏–±–∫–∞ API: {e}"

    return "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üíî"


@require_age_confirmed
async def handler_chat(
    message: types.Message,
    user: User,
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DeepSeek –∏–ª–∏ –¥—Ä—É–≥—É—é –ò–ò –º–æ–¥–µ–ª—å
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.
    –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ (–Ω–∞ –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥).
    """
    lang_code = message.from_user.language_code
    locale = get_locale(
        lang_code,
    )

    has_subscription = user.has_subscription

    if not has_subscription:
        await message.answer(
            locale.before_buy,
            reply_markup=get_before_buy_kb(
                lang_code,
            ),
        )
        return

    query = message.text.strip()
    if not query:
        return

    waiting = await message.answer(
        locale.thinking_bot,
    )
    response = await call_deepseek(
        query,
    )

    await waiting.edit_text(
        response,
    )
