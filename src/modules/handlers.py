import logging

from aiogram import types
from aiogram.types import (
    Message,
    LabeledPrice,
)
from aiogram.fsm.context import FSMContext

from src.modules import (
    keyboards,
    texts,
)
from src.fsm_models.fsm_models import AgeConfirm


_LOG = logging.getLogger("woman-tg-bot")


# FIXME: –í–º–µ—Å—Ç–æ —Ñ–ª–∞–≥–∞ –∏–∑ –º–æ–¥–µ–ª–∏ FSM —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ë–î Mongo
async def handler_start(
    message: Message,
    state: FSMContext,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞.
    """
    current_state = await state.get_state()
    if current_state == AgeConfirm.confirmed:
        # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ —Å—Ä–∞–∑—É –∫–∏–¥–∞–µ–º –∫ –¥–µ–≤—É—à–∫–∞–º
        await send_girls(message)
    else:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            texts.start,
            parse_mode="HTML",
            reply_markup=keyboards.confirm_kb,
        )
        await state.set_state(AgeConfirm.not_confirmed)


async def send_girls(
    message: Message,
):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–≤—É—à–∫–∞–º–∏.
    """
    await message.answer(
        texts.girls,
        parse_mode="HTML",
        reply_markup=keyboards.girls_kb,
    )


async def process_confirm_18(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    await state.set_state(AgeConfirm.confirmed)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    await send_girls(callback_query.message)
    await callback_query.answer()


async def process_girl(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    # –î–æ—Å—Ç–∞—ë–º –∏–∑ FSM —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await state.get_data()
    has_subscription = data.get("has_subscription", False)

    if not has_subscription:
        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–∫—É–ø–∫–µ
        await callback_query.message.answer(
            texts.before_buy,
            parse_mode="HTML",
            reply_markup=keyboards.before_buy_kb,
        )
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–∫–æ–Ω—Ç–µ–Ω—Ç"
        girl_name = callback_query.data.split("_")[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "hera"
        await callback_query.message.answer(
            f"–¢—ã –≤—ã–±—Ä–∞–ª –¥–µ–≤—É—à–∫—É: <b>{girl_name.capitalize()}</b> üòâ",
            parse_mode="HTML",
        )

    await callback_query.answer()


# TODO: –°–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
async def process_subscription_year(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏
    await state.update_data(has_subscription=True)
    await callback_query.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await callback_query.answer()


async def process_subscription_all(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    await state.update_data(has_subscription=True)
    await callback_query.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await callback_query.answer()


async def handler_about_slash(
    message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å–æ —Å–ª—ç—à–µ–º –æ –±–æ—Ç–µ: /about.
    """
    await message.answer(
        texts.about_us,
        parse_mode="HTML",
        reply_markup=keyboards.start_kb,
    )


async def handler_about_button(
        message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ –±–æ—Ç–µ.
    """
    await message.answer(
        texts.about_us,
        parse_mode="HTML",
        reply_markup=keyboards.start_kb,
    )


async def buy_stars(
    callback_query: types.CallbackQuery,
    plan: str = "month",
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞ Telegram Stars.
    plan: 'month' –∏–ª–∏ 'year'.
    """
    if plan == "month":
        prices = [LabeledPrice(
            label="–ü–æ–¥–ø–∏—Å–∫–∞ Premium –Ω–∞ –º–µ—Å—è—Ü",
            # FIXME: –ü–æ–º–µ–Ω—è—Ç—å —Å—É–º–º—É
            amount=1,  # 499
        )]
        payload = "premium_1_month"
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ Premium (–ú–µ—Å—è—Ü)"
    elif plan == "year":
        prices = [LabeledPrice(
            label="–ü–æ–¥–ø–∏—Å–∫–∞ Premium –Ω–∞ –≥–æ–¥",
            # FIXME: –ü–æ–º–µ–Ω—è—Ç—å —Å—É–º–º—É
            amount=2,  # 4190
        )]
        payload = "premium_1_year"
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ Premium (–ì–æ–¥)"
    else:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏!")
        return

    await callback_query.message.answer_invoice(
        title=title,
        description="–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞",
        payload=payload,
        provider_token="",
        currency="XTR",
        prices=prices,
        start_parameter=payload,
    )
    await callback_query.answer()


async def pre_checkout_stars(
    pre_checkout_query: types.PreCheckoutQuery,
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.
    """
    if pre_checkout_query.invoice_payload != "premium_1_month":
        await pre_checkout_query.answer(
            ok=False,
            error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",
        )
    else:
        await pre_checkout_query.answer(
            ok=True,
        )


# FIXME: –ó–¥–µ—Å—å —É–∂–µ –≤–º–µ—Å—Ç–æ start_kb –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ-–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ–Ω–∫–æ–π
# TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫–∫–∞—É–Ω—Ç (–ø—Ä–µ–º–∏—É–º –∏–ª–∏ –Ω–µ—Ç) —á–µ—Ä–µ–∑ –±–∞–∑—É
async def successful_payment_stars(
    message: types.Message,
    state: FSMContext,
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
    """
    payment = message.successful_payment
    telegram_payment_charge_id = payment.telegram_payment_charge_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ FSM
    await state.update_data(
        has_subscription=True,
    )

    # FIXME: –ó–¥–µ—Å—å —É–∂–µ –≤–º–µ—Å—Ç–æ start_kb –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ-–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ–Ω–∫–æ–π
    await message.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! ID –ø–ª–∞—Ç–µ–∂–∞: {telegram_payment_charge_id}",
        reply_markup=keyboards.start_kb,
    )
