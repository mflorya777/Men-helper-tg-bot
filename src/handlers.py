import logging

from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext

from src import (
    texts,
    keyboards,
)
from src.fsm_models.fsm_models import AgeConfirm


_LOG = logging.getLogger("woman-tg-bot")


# FIXME: –í–º–µ—Å—Ç–æ —Ñ–ª–∞–≥–∞ –∏–∑ –º–æ–¥–µ–ª–∏ FSM —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ë–î Mongo
async def handler_start(
    message: Message,
    state: FSMContext,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞.
    """
    current_state = await state.get_state()
    if current_state == AgeConfirm.confirmed:
        # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ —Å—Ä–∞–∑—É –∫–∏–¥–∞–µ–º –∫ –¥–µ–≤—É—à–∫–∞–º
        await send_girls(message)
    else:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            texts.start,
            parse_mode="HTML",
            reply_markup=keyboards.confirm_kb,
        )
        await state.set_state(AgeConfirm.not_confirmed)


async def send_girls(
    message: Message,
):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–≤—É—à–∫–∞–º–∏.
    """
    await message.answer(
        texts.girls,
        parse_mode="HTML",
        reply_markup=keyboards.girls_kb,
    )


async def process_confirm_18(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    await state.set_state(AgeConfirm.confirmed)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    await send_girls(callback_query.message)
    await callback_query.answer()


async def process_girl(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    # –î–æ—Å—Ç–∞—ë–º –∏–∑ FSM —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏
    data = await state.get_data()
    has_subscription = data.get("has_subscription", False)

    if not has_subscription:
        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–∫—É–ø–∫–µ
        await callback_query.message.answer(
            texts.before_buy,
            parse_mode="HTML",
            reply_markup=keyboards.before_buy_kb,
        )
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–∫–æ–Ω—Ç–µ–Ω—Ç"
        girl_name = callback_query.data.split("_")[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "hera"
        await callback_query.message.answer(
            f"–¢—ã –≤—ã–±—Ä–∞–ª –¥–µ–≤—É—à–∫—É: <b>{girl_name.capitalize()}</b> üòâ",
            parse_mode="HTML",
        )

    await callback_query.answer()


# TODO: –°–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
async def process_subscription_year(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏
    await state.update_data(has_subscription=True)
    await callback_query.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await callback_query.answer()


async def process_subscription_all(
    callback_query: types.CallbackQuery,
    state: FSMContext,
):
    await state.update_data(has_subscription=True)
    await callback_query.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await callback_query.answer()


async def handler_about_slash(
    message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä —Å–æ —Å–ª—ç—à–µ–º –æ –±–æ—Ç–µ: /about.
    """
    await message.answer(
        texts.about_us,
        parse_mode="HTML",
        reply_markup=keyboards.start_kb,
    )


async def handler_about_button(
        message: Message,
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ –±–æ—Ç–µ.
    """
    await message.answer(
        texts.about_us,
        parse_mode="HTML",
        reply_markup=keyboards.start_kb,
    )


async def register_handlers(
    dp: Dispatcher,
):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤.
    """
    dp.message.register(
        handler_start,
        Command("start"),
    )
    dp.callback_query.register(
        process_confirm_18,
        lambda
            c: c.data == "confirm_18",
    )
    dp.message.register(
        handler_about_slash,
        Command("about"),
    )
    dp.message.register(
        handler_about_button,
        lambda
            message: message.text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ",
    )
    dp.callback_query.register(
        process_girl,
        lambda
            c: c.data.startswith("girl_"),
    )
    dp.callback_query.register(
        process_subscription_year,
        lambda
            c: c.data == "subscription_year",
    )
    dp.callback_query.register(
        process_subscription_all,
        lambda
            c: c.data == "subscription_all",
    )
